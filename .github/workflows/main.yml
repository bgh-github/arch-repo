name: Make packages

on:
  workflow_dispatch:

jobs:
  pkgbuild:
    runs-on: ubuntu-latest
    container:
      image: archlinux:base-devel
    env:
      repo_name: custom-bgh
      repo_base_url: https://repo.bgh.io/arch
      repo_api_url : https://la.storage.bunnycdn.com/bgh-repo/arch
    steps:
      - uses: actions/checkout@v3
      - name: Sync and update container
        run: pacman --sync --sysupgrade --refresh --noconfirm
      - name: Prepare environment for build user
        run: |
          username=build_user
          sed \
            --in-place \
            --expression='s@#BUILDDIR=.*@BUILDDIR=/tmp/makepkg@' \
            --expression='s@#PKGDEST=.*@PKGDEST=/tmp/packages@' \
            --expression='s@#SRCDEST=.*@SRCDEST=/tmp/sources@' \
            --expression='s@#PACKAGER=.*@PACKAGER="bgh <arch at bgh dot io>"@' \
            /etc/makepkg.conf
          useradd --create-home "${username}"
          echo "${username} ALL=(ALL) NOPASSWD: /usr/bin/pacman" > "/etc/sudoers.d/${username}"
      - name: Import signing key
        run: |
          echo "${{ secrets.GPG_PRIVKEY_B64 }}" | base64 --decode | gpg --batch --import
      - name: Build package
        run: |
          for pkgdir in pkgbuild/*/
          do
            su build_user --command "cd "${pkgdir}"; makepkg --syncdeps --noconfirm"
            gpg \
              --detach-sign \
              --pinentry-mode loopback \
              --batch \
              --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              "$(ls /tmp/packages/"$(basename "${pkgdir}")"*.pkg.tar.zst)"
            done
      - name: Download and verify current repository package database
        run: |
          curl \
            --fail \
            --remote-name \
            "${{ env.repo_base_url }}/${{ env.repo_name }}/os/x86_64/${{ env.repo_name }}.db" \
            || true
            curl \
              --fail \
              --remote-name \
              "${{ env.repo_base_url }}/${{ env.repo_name }}/os/x86_64/${{ env.repo_name }}.db.sig" \
              || true
            if [ -f "${{ env.repo_name }}.db" ]; then gpg --verify "${{ env.repo_name }}.db.sig"; fi
      - name: Upload package to repository and update database
        run: |
          for pkgfile in /tmp/packages/*.pkg.tar.zst
          do
            curl \
              --request PUT \
              --url "${{ env.repo_api_url  }}/${{ env.repo_name }}/os/x86_64/$(basename "${pkgfile}")" \
              --header "AccessKey: ${{ secrets.BUNNY_ACCESSKEY }}" \
              --header "Content-Type: application/octet-stream" \
              --data-binary "@${pkgfile}"
            curl \
              --request PUT \
              --url "${{ env.repo_api_url  }}/${{ env.repo_name }}/os/x86_64/$(basename "${pkgfile}").sig" \
              --header "AccessKey: ${{ secrets.BUNNY_ACCESSKEY }}" \
              --header "Content-Type: application/octet-stream" \
              --data-binary "@${pkgfile}.sig"
            repo-add --sign "${{ env.repo_name }}.db.tar.gz" "${pkgfile}.sig"
          done
          gpg \
            --detach-sign \
            --pinentry-mode loopback \
            --batch \
            --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
            -- sign \
            "${{ env.repo_name }}.db.tar.gz"
          curl \
            --request PUT \
            --url "${{ env.repo_api_url  }}/${{ env.repo_name }}/os/x86_64/${{ env.repo_name }}.db" \
            --header "AccessKey: ${{ secrets.BUNNY_ACCESSKEY }}" \
            --header "Content-Type: application/octet-stream" \
            --data-binary "@${{ env.repo_name }}.db.tar.gz"
          curl \
            --request PUT \
            --url "${{ env.repo_api_url  }}/${{ env.repo_name }}/os/x86_64/${{ env.repo_name }}.db.sig" \
            --header "AccessKey: ${{ secrets.BUNNY_ACCESSKEY }}" \
            --header "Content-Type: application/octet-stream" \
            --data-binary "@${{ env.repo_name }}.db.tar.gz.sig"
